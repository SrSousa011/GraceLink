pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }

    environment {
        SONARQUBE_SERVER = 'sq1'  
    }

    stages {

        stage('GetCode') {
            steps {
                git 'https://github.com/SrSousa011/GraceLink.git'
            }
        }

        stage('Build') {
            steps {
                script {
                    bat 'mvn clean package'
                }
            }
        }

        stage('SonarQube Scan') {
            steps {
                withSonarQubeEnv(SONARQUBE_SERVER) {
                    bat 'mvn sonar:sonar'
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    def qualityGate = waitForQualityGate()

                    if (qualityGate.status != 'OK') {
                        echo "Quality Gate failed: ${qualityGate.status}"
                        currentBuild.result = 'ABORTED'
                        return
                    }
                }
            }
        }
    } // Closing the stages block

    post {
        always {
            script {
                echo "Executando ações pós-build no Windows"
            }
        }

        success {
            script {
                echo "Build e análise SonarQube passaram com sucesso!"
            }
        }

        failure {
            script {
                echo "Build falhou. Verifique os logs para mais detalhes."
            }
        }
    }
}
