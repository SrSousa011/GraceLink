pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timeout(time: 1, unit: 'HOURS')
    }

    environment {
        SONARQUBE_SERVER = 'sq1'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout scm
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    bat 'mvn clean package -DskipTests'
                }
            }
        }

        stage('SonarQube Scan') {
            steps {
                withSonarQubeEnv(SONARQUBE_SERVER) {
                    bat 'mvn sonar:sonar'
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    def qualityGate = waitForQualityGate()

                    if (qualityGate.status != 'OK') {
                        echo "Quality Gate failed: ${qualityGate.status}"
                        currentBuild.result = 'ABORTED'
                        return
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo "Performing post-build actions"
            }
        }

        success {
            script {
                echo "Build and SonarQube scan passed successfully!"
            }
        }

        failure {
            script {
                echo "Build failed. Check the logs for more details."
            }
        }
    }
}
