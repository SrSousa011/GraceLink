pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }

    environment {
        SONARQUBE_SERVER = 'sq1'  
    }

    stages {
        stage('Build') {
            steps {
                script {
                    bat 'mvn clean package'
                }
            }
        }

       stage('SonarQube Scan') {
            steps {
                withSonarQubeEnv(SONARQUBE_SERVER) {
                    script {
                        // Run the SonarQube analysis and specify the `lib` directory for Flutter code
                        bat '''
                        sonar-scanner \
                            -Dsonar.projectKey=gracelink \
                            -Dsonar.sources=lib \
                            -Dsonar.tests=test \
                            -Dsonar.language=dart \
                            -Dsonar.dart.pubspec=pubspec.yaml \
                            -Dsonar.exclusions=**/*.json,**/*.png,**/*.jpg  // exclude non-code files
                        '''
                    }
                }
            }
        }


        stage('Quality Gate') {
            steps {
                script {
                    def qualityGate = waitForQualityGate()

                    if (qualityGate.status != 'OK') {
                        echo "Quality Gate failed: ${qualityGate.status}"
                        currentBuild.result = 'ABORTED'
                        return
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                echo "Executando ações pós-build no Windows"
            }
        }

        success {
            script {
                echo "Build e análise SonarQube passaram com sucesso!"
            }
        }

        failure {
            script {
                echo "Build falhou. Verifique os logs para mais detalhes."
            }
        }
    }
}
